version: '3.7'

services:

  zookeeper:
    image: zookeeper:3.7.0
    container_name: zookeeper
    restart: "no"
    networks:
      - kafka-net
    ports:
      - "2181:2181"

  kafka:
    image: obsidiandynamics/kafka
    container_name: kafka
    restart: "no"
    networks:
      - kafka-net
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "no"
    networks:
      - kafka-net
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKER_CONNECT: "kafka:29092"
    depends_on:
      - "kafka"

  zipkin:
    image: openzipkin/zipkin
    ports:
      - "9411:9411"

  user-service:
    build:
      context: ./user-service
    image: user-service:0.1
    container_name: user-service
    ports:
      - "8080:8080"
    depends_on:
      user-database:
        condition: service_healthy
    volumes:
      - user_data:/var/lib

  card-service:
    build:
      context: ./card-service
    image: card-service:0.1
    container_name: card-service
    ports:
      - "8082:8082"
    depends_on:
      card-database:
        condition: service_healthy
    volumes:
      - card_data:/var/lib

  product-service:
    build:
      context: ./product-service
    image: product-service:0.1
    container_name: product-service
    ports:
      - "8084:8084"
    depends_on:
      product-database:
        condition: service_healthy
    volumes:
      - product_data:/var/lib

  auction-service:
    build:
      context: ./auction-service
    image: auction-service:0.1
    container_name: auction-service
    ports:
      - "8085:8085"
    depends_on:
      auction-database:
        condition: service_healthy
    volumes:
      - auction_data:/var/lib


  authentication-service:
    build:
      context: ./authentication-service
    image: authentication-service:0.1
    container_name: authentication-service
    ports:
      - "8083:8083"


  api-gateway:
    build:
      context: ./api-gateway
    image: api-gateway:0.1
    container_name: api-gateway
    ports:
      - "8765:8765"


  eureka-server:
    build:
      context: ./eureka-server
    image: eureka-server:0.1
    container_name: eureka-server
    ports:
      - "8761:8761"


  user-database:
    image: postgres:13
    container_name: user-database
    ports:
      - "5435:5432"
    environment:
      - 'POSTGRES_USER=postgres'
      - 'POSTGRES_PASSWORD=27112001jeka'
      - 'POSTGRES_DB=user_db'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U habrpguser -d habrdb" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - user_data:/var/lib

  product-database:
    image: postgres:13
    container_name: product-database
    ports:
      - "5434:5432"
    environment:
      - 'POSTGRES_USER=postgres'
      - 'POSTGRES_PASSWORD=27112001jeka'
      - 'POSTGRES_DB=product_db'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U habrpguser -d habrdb" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - product_data:/var/lib

  card-database:
    image: postgres:13
    container_name: card-database
    ports:
      - "5433:5432"
    environment:
      - 'POSTGRES_USER=postgres'
      - 'POSTGRES_PASSWORD=27112001jeka'
      - 'POSTGRES_DB=card_db'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U habrpguser -d habrdb" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - card_data:/var/lib

  auction-database:
    image: postgres:13
    container_name: auction-database
    ports:
      - "5437:5432"
    environment:
      - 'POSTGRES_USER=postgres'
      - 'POSTGRES_PASSWORD=27112001jeka'
      - 'POSTGRES_DB=auction_db'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U habrpguser -d habrdb" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - auction_data:/var/lib

volumes:
  user_data:
  product_data:
  card_data:
  auction_data:


networks:
  kafka-net:
    name: kafka-net
    driver: bridge